// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: codepair/v1/intelligence.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntelligenceService_RunFollowUpIntelligence_FullMethodName = "/codepair.v1.IntelligenceService/RunFollowUpIntelligence"
	IntelligenceService_RunIntelligenceFeature_FullMethodName  = "/codepair.v1.IntelligenceService/RunIntelligenceFeature"
)

// IntelligenceServiceClient is the client API for IntelligenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IntelligenceService
type IntelligenceServiceClient interface {
	// POST /intelligence
	// Run Follow Up Yorkie Intelligence after feature running
	RunFollowUpIntelligence(ctx context.Context, in *RunFollowUpIntelligenceRequest, opts ...grpc.CallOption) (*RunFollowUpIntelligenceResponse, error)
	// POST /intelligence/{feature}
	// Run the Yorkie Intelligence Feature
	RunIntelligenceFeature(ctx context.Context, in *RunIntelligenceFeatureRequest, opts ...grpc.CallOption) (*RunIntelligenceFeatureResponse, error)
}

type intelligenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntelligenceServiceClient(cc grpc.ClientConnInterface) IntelligenceServiceClient {
	return &intelligenceServiceClient{cc}
}

func (c *intelligenceServiceClient) RunFollowUpIntelligence(ctx context.Context, in *RunFollowUpIntelligenceRequest, opts ...grpc.CallOption) (*RunFollowUpIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunFollowUpIntelligenceResponse)
	err := c.cc.Invoke(ctx, IntelligenceService_RunFollowUpIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceServiceClient) RunIntelligenceFeature(ctx context.Context, in *RunIntelligenceFeatureRequest, opts ...grpc.CallOption) (*RunIntelligenceFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunIntelligenceFeatureResponse)
	err := c.cc.Invoke(ctx, IntelligenceService_RunIntelligenceFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntelligenceServiceServer is the server API for IntelligenceService service.
// All implementations must embed UnimplementedIntelligenceServiceServer
// for forward compatibility.
//
// IntelligenceService
type IntelligenceServiceServer interface {
	// POST /intelligence
	// Run Follow Up Yorkie Intelligence after feature running
	RunFollowUpIntelligence(context.Context, *RunFollowUpIntelligenceRequest) (*RunFollowUpIntelligenceResponse, error)
	// POST /intelligence/{feature}
	// Run the Yorkie Intelligence Feature
	RunIntelligenceFeature(context.Context, *RunIntelligenceFeatureRequest) (*RunIntelligenceFeatureResponse, error)
	mustEmbedUnimplementedIntelligenceServiceServer()
}

// UnimplementedIntelligenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntelligenceServiceServer struct{}

func (UnimplementedIntelligenceServiceServer) RunFollowUpIntelligence(context.Context, *RunFollowUpIntelligenceRequest) (*RunFollowUpIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFollowUpIntelligence not implemented")
}
func (UnimplementedIntelligenceServiceServer) RunIntelligenceFeature(context.Context, *RunIntelligenceFeatureRequest) (*RunIntelligenceFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunIntelligenceFeature not implemented")
}
func (UnimplementedIntelligenceServiceServer) mustEmbedUnimplementedIntelligenceServiceServer() {}
func (UnimplementedIntelligenceServiceServer) testEmbeddedByValue()                             {}

// UnsafeIntelligenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntelligenceServiceServer will
// result in compilation errors.
type UnsafeIntelligenceServiceServer interface {
	mustEmbedUnimplementedIntelligenceServiceServer()
}

func RegisterIntelligenceServiceServer(s grpc.ServiceRegistrar, srv IntelligenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntelligenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntelligenceService_ServiceDesc, srv)
}

func _IntelligenceService_RunFollowUpIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFollowUpIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServiceServer).RunFollowUpIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntelligenceService_RunFollowUpIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServiceServer).RunFollowUpIntelligence(ctx, req.(*RunFollowUpIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntelligenceService_RunIntelligenceFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunIntelligenceFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServiceServer).RunIntelligenceFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntelligenceService_RunIntelligenceFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServiceServer).RunIntelligenceFeature(ctx, req.(*RunIntelligenceFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntelligenceService_ServiceDesc is the grpc.ServiceDesc for IntelligenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntelligenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codepair.v1.IntelligenceService",
	HandlerType: (*IntelligenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunFollowUpIntelligence",
			Handler:    _IntelligenceService_RunFollowUpIntelligence_Handler,
		},
		{
			MethodName: "RunIntelligenceFeature",
			Handler:    _IntelligenceService_RunIntelligenceFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codepair/v1/intelligence.proto",
}
