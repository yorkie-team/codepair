// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: codepair/v1/files.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilesService_CreateUploadPresignedUrl_FullMethodName   = "/codepair.v1.FilesService/CreateUploadPresignedUrl"
	FilesService_CreateDownloadPresignedUrl_FullMethodName = "/codepair.v1.FilesService/CreateDownloadPresignedUrl"
	FilesService_ExportFile_FullMethodName                 = "/codepair.v1.FilesService/ExportFile"
)

// FilesServiceClient is the client API for FilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesServiceClient interface {
	// POST /files
	// Create Presigned URL for Upload
	CreateUploadPresignedUrl(ctx context.Context, in *CreateUploadPresignedUrlRequest, opts ...grpc.CallOption) (*CreateUploadPresignedUrlResponse, error)
	// GET /files/{file_name}
	// Create Presigned URL for Download
	CreateDownloadPresignedUrl(ctx context.Context, in *CreateDownloadPresignedUrlRequest, opts ...grpc.CallOption) (*CreateDownloadPresignedUrlResponse, error)
	// POST /files/export-markdown
	// or a more general route (like "/files/export")
	ExportFile(ctx context.Context, in *ExportFileRequest, opts ...grpc.CallOption) (*ExportFileResponse, error)
}

type filesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesServiceClient(cc grpc.ClientConnInterface) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) CreateUploadPresignedUrl(ctx context.Context, in *CreateUploadPresignedUrlRequest, opts ...grpc.CallOption) (*CreateUploadPresignedUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadPresignedUrlResponse)
	err := c.cc.Invoke(ctx, FilesService_CreateUploadPresignedUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) CreateDownloadPresignedUrl(ctx context.Context, in *CreateDownloadPresignedUrlRequest, opts ...grpc.CallOption) (*CreateDownloadPresignedUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDownloadPresignedUrlResponse)
	err := c.cc.Invoke(ctx, FilesService_CreateDownloadPresignedUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) ExportFile(ctx context.Context, in *ExportFileRequest, opts ...grpc.CallOption) (*ExportFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportFileResponse)
	err := c.cc.Invoke(ctx, FilesService_ExportFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServiceServer is the server API for FilesService service.
// All implementations must embed UnimplementedFilesServiceServer
// for forward compatibility.
type FilesServiceServer interface {
	// POST /files
	// Create Presigned URL for Upload
	CreateUploadPresignedUrl(context.Context, *CreateUploadPresignedUrlRequest) (*CreateUploadPresignedUrlResponse, error)
	// GET /files/{file_name}
	// Create Presigned URL for Download
	CreateDownloadPresignedUrl(context.Context, *CreateDownloadPresignedUrlRequest) (*CreateDownloadPresignedUrlResponse, error)
	// POST /files/export-markdown
	// or a more general route (like "/files/export")
	ExportFile(context.Context, *ExportFileRequest) (*ExportFileResponse, error)
	mustEmbedUnimplementedFilesServiceServer()
}

// UnimplementedFilesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesServiceServer struct{}

func (UnimplementedFilesServiceServer) CreateUploadPresignedUrl(context.Context, *CreateUploadPresignedUrlRequest) (*CreateUploadPresignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadPresignedUrl not implemented")
}
func (UnimplementedFilesServiceServer) CreateDownloadPresignedUrl(context.Context, *CreateDownloadPresignedUrlRequest) (*CreateDownloadPresignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadPresignedUrl not implemented")
}
func (UnimplementedFilesServiceServer) ExportFile(context.Context, *ExportFileRequest) (*ExportFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportFile not implemented")
}
func (UnimplementedFilesServiceServer) mustEmbedUnimplementedFilesServiceServer() {}
func (UnimplementedFilesServiceServer) testEmbeddedByValue()                      {}

// UnsafeFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServiceServer will
// result in compilation errors.
type UnsafeFilesServiceServer interface {
	mustEmbedUnimplementedFilesServiceServer()
}

func RegisterFilesServiceServer(s grpc.ServiceRegistrar, srv FilesServiceServer) {
	// If the following call pancis, it indicates UnimplementedFilesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilesService_ServiceDesc, srv)
}

func _FilesService_CreateUploadPresignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadPresignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateUploadPresignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesService_CreateUploadPresignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateUploadPresignedUrl(ctx, req.(*CreateUploadPresignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_CreateDownloadPresignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadPresignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateDownloadPresignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesService_CreateDownloadPresignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateDownloadPresignedUrl(ctx, req.(*CreateDownloadPresignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_ExportFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).ExportFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesService_ExportFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).ExportFile(ctx, req.(*ExportFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesService_ServiceDesc is the grpc.ServiceDesc for FilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codepair.v1.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUploadPresignedUrl",
			Handler:    _FilesService_CreateUploadPresignedUrl_Handler,
		},
		{
			MethodName: "CreateDownloadPresignedUrl",
			Handler:    _FilesService_CreateDownloadPresignedUrl_Handler,
		},
		{
			MethodName: "ExportFile",
			Handler:    _FilesService_ExportFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codepair/v1/files.proto",
}
