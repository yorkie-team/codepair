// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: codepair/v1/documents.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentsService_GetDocumentFromShareToken_FullMethodName = "/codepair.v1.DocumentsService/GetDocumentFromShareToken"
)

// DocumentsServiceClient is the client API for DocumentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DocumentsService
type DocumentsServiceClient interface {
	// GET /documents/share
	// Retrieve a Shared Document using Sharing Token (passed as query param)
	//
	// If you plan to do: GET /documents/share?sharing_token=xxx
	// you typically just do "get: /documents/share" and parse query yourself.
	// Or, if you'd rather do GET /documents/share/{sharing_token}, adjust below:
	GetDocumentFromShareToken(ctx context.Context, in *GetDocumentFromShareTokenRequest, opts ...grpc.CallOption) (*GetDocumentFromShareTokenResponse, error)
}

type documentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsServiceClient(cc grpc.ClientConnInterface) DocumentsServiceClient {
	return &documentsServiceClient{cc}
}

func (c *documentsServiceClient) GetDocumentFromShareToken(ctx context.Context, in *GetDocumentFromShareTokenRequest, opts ...grpc.CallOption) (*GetDocumentFromShareTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentFromShareTokenResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetDocumentFromShareToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServiceServer is the server API for DocumentsService service.
// All implementations must embed UnimplementedDocumentsServiceServer
// for forward compatibility.
//
// DocumentsService
type DocumentsServiceServer interface {
	// GET /documents/share
	// Retrieve a Shared Document using Sharing Token (passed as query param)
	//
	// If you plan to do: GET /documents/share?sharing_token=xxx
	// you typically just do "get: /documents/share" and parse query yourself.
	// Or, if you'd rather do GET /documents/share/{sharing_token}, adjust below:
	GetDocumentFromShareToken(context.Context, *GetDocumentFromShareTokenRequest) (*GetDocumentFromShareTokenResponse, error)
	mustEmbedUnimplementedDocumentsServiceServer()
}

// UnimplementedDocumentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentsServiceServer struct{}

func (UnimplementedDocumentsServiceServer) GetDocumentFromShareToken(context.Context, *GetDocumentFromShareTokenRequest) (*GetDocumentFromShareTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentFromShareToken not implemented")
}
func (UnimplementedDocumentsServiceServer) mustEmbedUnimplementedDocumentsServiceServer() {}
func (UnimplementedDocumentsServiceServer) testEmbeddedByValue()                          {}

// UnsafeDocumentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServiceServer will
// result in compilation errors.
type UnsafeDocumentsServiceServer interface {
	mustEmbedUnimplementedDocumentsServiceServer()
}

func RegisterDocumentsServiceServer(s grpc.ServiceRegistrar, srv DocumentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentsService_ServiceDesc, srv)
}

func _DocumentsService_GetDocumentFromShareToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentFromShareTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocumentFromShareToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetDocumentFromShareToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocumentFromShareToken(ctx, req.(*GetDocumentFromShareTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentsService_ServiceDesc is the grpc.ServiceDesc for DocumentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codepair.v1.DocumentsService",
	HandlerType: (*DocumentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocumentFromShareToken",
			Handler:    _DocumentsService_GetDocumentFromShareToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codepair/v1/documents.proto",
}
